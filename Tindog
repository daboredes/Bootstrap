Para el navbar, sacamos el class que le dar color 'bg-dark', para que quede el fondo del mismo color que la primer seccion

Para el background de la primer seccion, use la pagina https://cssgradient.io/ para elegir el gradient, y se los puse al id title que es la primer seccion

Para separar el primer texto y la imagen, usamos el layout de bootstrap: 
        <div class='row'>
            <div class="col-lg-6">
                <h1>Meet new and interesting dogs nearby.</h1>           
                <button type="button">Download</button>
                <button type="button">Download</button>
            </div>
            <div class='col-lg-6'>
                <img id="phone" src="images/iphone6.png" alt="phone">
            </div>
        </div>

Para cambiar el estilo del h1:
h1 {
  font-size: 3.5rem; /*para que se destaque del navbar*/
  font-family: "Montserrat", sans-serif;
  font-weight: 900; /*para darle grosor*
  line-height: 1.5;/*no se especifica unidad*/
}

Hago un container-fluid que envuelva el nav, hasta despues de la imagen, y luego modifico el css:
.container-fluid {
  padding: 3% 15%;
}

Recordar el atajo, el primer valor es arriba y abajo, el segundo izquierda y derecha.

Los botones: se agrega la clase, y para el caso del style light se agrega la clase btn-lg para hacer mas grande
<button type="button" class="btn btn-secondary btn-lg">Download</button>
<button type="button" class="btn btn-outline-light btn-lg">Download</button>

Para los iconos que llevan los botones: https://fontawesome.com/v6.0
Al igual que bootstrap, hay que usar el cdn de fontawesome a nuestra web, puede ser abajo de nuestro style.css
<link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous"/>
Luego de elegido el icono, copiamos el <i que tienen, y lo pegamos. Funciona igual que bootstrap, con clases.
<button type="button" class="btn btn-secondary btn-lg"><i class="fab fa-apple"></i> Download</button> notese el espacio entre el </i> y el download.
<button type="button" class="btn btn-outline-light btn-lg"><i class="fab fa-google-play"></i> Download</button>
Usan <i> porque los iconos no se inclinan y porque es un tag corto. Pero se puede cambiar por <span>

Sobre las fuentes que usamos en la pagina:
definimos la fuente en el body:

body {
  font-family: "Montserrat";
}

Para el color del h1, lo puedo definir en el h1, o en el container id title, por si luego agrego mas texto, quede del mismo color

Para los styles del navbar:

/* Para dejar mas espacio entre el navbar y el h1 y la imagen */
.navbar {
  padding: 0 0 4.5rem;/*no es lo mismo que definir padding-bottom.*/
}
.navbar-brand {
  font-family: "Ubuntu";
  font-size: 2.5rem;
  font-weight: bold;
}
/* Para espaciar los elementos del navbar */
.nav-item {
  padding: 0 18px;
}/*como ya son responsive, no es necesario especificar rem, con px esta bien.*/
.nav-link {
  font-family: "Ubuntu";
  font-weight: 100;
  font-size: 1.2rem;
  color: #fff;
}

Para los buttons: por lo general es mejor crear un class personalizado, que usar el btn de Bootstrap. En este caso, creamos una nueva class: download-button
.download-button {
  margin: 5% 3% 5% 0;
}

/*title image*/
La queremos mas chica, entonces uso la propiedad width.
#phone {
  width: 60%; /*la hace 40% mas chica que la original */
  transform: rotate(25deg);
  margin-left: 75px;
}

Para la parte de features, es un challenge.

Primero creo un container-fluid para centrar facilmente
Luego el div class='row', luego cada features es una columna
Al container-fluid se le puede dar la propiedad text-align center para centrar los iconos y el texto h3 y p.
Se le agrega padding para espaciar
.container-fluid {
  padding: 7.5% 15%;
  text-align: center; /*Esto arregla que los iconos se centren, ademas del h3 y el p*/
}
.fas {
  color: #ef8172;
  font-size: 5rem;
  padding: auto 0;
}
.fas:hover {
  color: #ff4c68;
}
.feature-h3 {
  margin: 8px 0;
  font-family: "Montserrat";
  font-weight: 700;
  font-size: 1.5rem;
  line-height: 1;
  /* text-align: center; */
}
.feature-p {
  color: #8f8f8f;
  /* text-align: center; */
}
Los iconos de font awesome tiene una clase que les permite ser redimensionados: se les agrega fa-Xx y listo, en este caso fue 4x.

Para que la imagen del celular quede por detras de la segunda seccion:
Primero, creamos una class para el div que contiene la imagen, y le seteamos la position relative, para que la imagen pueda tener position absolute.
Seteamos la imagen con position absoulute, y z-index: 0 para mandarlo atras del segundo div, que le damos un z-indez:1 para que sea mas grande y este adelante.
La imagen no puede tener z-indez:-1 porque se va atras de su propio contenedor.
Si estan posicionados, y uno tiene z-index, entonces 

Para cambiar la posicion de la foto cuando cambie el tamanio del viewport, usamos media query: 
@media (max-width: 975px) {
  #phone {
    position: static;
    transform: rotate(0deg);
  }
}

Combine selectors:
El padding del title queda muy grande, pero si seteas uno con el id, se le agrega al del class y queda mas grande aun.
Para seleccionar un class dentro de un id:
#title .container-fluid{
}
